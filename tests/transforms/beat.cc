/*! @file beat.cc
 *  @brief Tests for SoundFeatureExtraction::Transforms::BEAT.
 *  @author Shapichev Alexey <a.shapichev@samsung.com>
 *  @version 1.0
 *
 *  @section Notes
 *  This code partially conforms to <a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml">Google C++ Style Guide</a>.
 *
 *  @section Copyright
 *  Copyright 2013 Samsung R&D Institute Russia
 */

#include <math.h>
#include "src/transforms/beat.h"
#include "tests/transforms/transform_test.h"
#include "tests/transforms/beat_test.inc"

using SoundFeatureExtraction::Transforms::Beat;

class BeatTest : public TransformTest<Beat> {
 public:
  int Size;

  virtual void SetUp() {
    Size = sizeof(data_test) / sizeof(data_test[0]);
    SetUpTransform(1, Size, 3000);
    memcpy((*Input)[0], data_test, Size * sizeof(float));
  }
};

TEST_F(BeatTest, Do) {
  Do((*Input), &(*Output));
  ASSERT_NEAR(180.f, (*Output)[0], 2.f);
}

TEST_F(BeatTest, CombConvolve) {
  auto data_size = sizeof(data_conv) / sizeof(data_conv[0]);
  float out[data_size + 2001 - 1];
  CombConvolve(data_conv, data_size, 3, 1000, out);
  for (int i = 0; i < static_cast<int>(data_size) + 2000; i++) {
    ASSERT_NEAR(out[i], data_conv_result[i], 0.0001f) << "i = " << i;
  }
}

TEST_F(BeatTest, FixBorderErrors) {
  const float energies[] = { 1012404692633260130304.f,
      982818294881249656832.f, 963850540625648680960.f,
      946089469595206287360.f, 936773562659757883392.f, 924015990815324110848.f,
      922571250128612491264.f, 910902704969072246784.f, 900560469899792613376.f,
      884551932443094941696.f, 876365725326674755584.f, 873791847770888339456.f,
      870925658451787907072.f, 860892482906936573952.f, 857426822256186621952.f,
      855589283239475281920.f, 854900513971464306688.f, 861119140631932829696.f,
      869092693403448115200.f, 878364549505041301504.f, 893381028406322266112.f,
      910161792461625622528.f, 925137598228771897344.f, 937735644130154905600.f,
      945698008271345942528.f, 945337649932412125184.f, 937413988600518803456.f,
      927317270079675039744.f, 919784788596665352192.f, 915013084053977956352.f,
      910993199174084722688.f, 907542738172077146112.f, 905593101745890787328.f,
      904853033663374295040.f, 903410544776476360704.f, 900307212789497200640.f,
      895968135286014083072.f, 891619698739555336192.f, 887709377994346725376.f,
      883871677793129463808.f, 879717036768136003584.f, 875266565542619643904.f,
      870826649628729933824.f, 866775098813956751360.f, 863488104404673888256.f,
      861004158103946526720.f, 859143256664168202240.f, 857771558733912997888.f,
      856742908431523905536.f, 855900735301205622784.f, 855080939431535837184.f,
      854239118144938442752.f, 853574555724924583936.f, 853407218851270098944.f,
      853977909366550953984.f, 855457764056607227904.f, 857822927917162692608.f,
      860982977111949049856.f, 864950648383662456832.f, 869494569301446754304.f,
      874622058214696419328.f, 880164652349850124288.f, 885989636255388794880.f,
      892129872134843400192.f, 898612944535931584512.f, 905191014741659615232.f,
      911878860188304801792.f, 918452497163149639680.f, 924848030846480809984.f,
      930736979940476977152.f, 936131729344113410048.f, 940912933667264790528.f,
      944958854982503759872.f, 948259571296901267456.f, 950912965533608443904.f,
      952875972021188558848.f, 954364833910499573760.f, 955471100937716629504.f,
      956355776789518221312.f, 957145595574168322048.f, 957930981127935229952.f,
      958813545917411491840.f, 959809404385013792768.f, 960943678172413558784.f,
      962225726322586419200.f, 963583280135261913088.f, 965015072973044842496.f,
      966496827619193913344.f, 968042899297521369088.f, 969582778526361190400.f,
      971134127860501970944.f, 972723194841521979392.f, 974322183815471038464.f,
      975937076125604249600.f, 977574345696385957888.f, 979237933177490112512.f,
      980969567234214068224.f, 982694164416520257536.f, 984487019280678780928.f,
      986349187357852303360.f
  };
  float ret = FixBorderErrors(energies, 50, 250, 248, 2.0);
  EXPECT_GT(ret, 90.f);
  EXPECT_LT(ret, 110.f);
}
